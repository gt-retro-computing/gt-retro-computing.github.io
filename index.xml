<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The IMSAI Gang</title>
    <link>/</link>
    <description>Recent content on The IMSAI Gang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 26 Apr 2022 03:00:00 -0400</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Debugging the Cremenco TU-ART Card</title>
      <link>/posts/cremenco_tuart_debugging/</link>
      <pubDate>Tue, 26 Apr 2022 03:00:00 -0400</pubDate>
      
      <guid>/posts/cremenco_tuart_debugging/</guid>
      <description>This is the first [and potentially the last :( ] time I am writing for this blog. I&amp;rsquo;ve been working at the VIP for 2 semesters, and my work primarily focused on getting the IMSAI 8080 to work. Here I document my work with the Cremenco TU-ART card, and how Calvin and I tried to get it to work with a PuTTY terminal.
Background Work done previously by Calvin had led to the discovery of the FTDI interface, a way to convert USB communication to Serial communication (TTL level) and vice versa.</description>
    </item>
    
    <item>
      <title>FPGA: UART</title>
      <link>/posts/fpga_uart/</link>
      <pubDate>Sun, 05 Sep 2021 12:23:09 -0400</pubDate>
      
      <guid>/posts/fpga_uart/</guid>
      <description>Now that we have a FPGA add in card, we can start to prototype some hardware using this FPGA. The FPGA we got has 15k logic elements, this should be plenty for us to implement many features at once.
One of the first feature I&amp;rsquo;d like to implement is a reliable UART/serial communication card.
Breakdown of the UART Controller  Parallel to serial converter (UART Tx side) Serial to parallel converter (UART Rx side) Interface with S100 Bus Control / Data registers for the serial  Implemeting the serial Tx side The goal here is to implement a TTL UART transimitter.</description>
    </item>
    
    <item>
      <title>S100 FPGA and 16550 UART</title>
      <link>/posts/fpga_16550uart/</link>
      <pubDate>Mon, 30 Aug 2021 15:27:06 -0400</pubDate>
      
      <guid>/posts/fpga_16550uart/</guid>
      <description>It has been a while since I&amp;rsquo;ve written on this blog. There has been quite a lot that has happened since my last update. One of the most recurring theme in this endavor on the retro computing has been constantly repairing old, unreliable circuits. Since now the focus has been slowly shifting to the software side, for the interest of providing a reliable platform for software debugging, I decided to deisng a S100 add-in card that features an FPGA.</description>
    </item>
    
    <item>
      <title>LLVM Z80: Building</title>
      <link>/posts/build_llvm/</link>
      <pubDate>Mon, 30 Aug 2021 12:23:09 -0400</pubDate>
      
      <guid>/posts/build_llvm/</guid>
      <description>Steps  Clone the github repo (This is quite big, so make some disk space)  git clone https://github.com/gt-retro-computing/llvm-project Setup the cmake project by going into the llvm sub-directory and create a build directory  # ...../llvm-project/llvm&amp;gt; mkdir cmake-build cd cmake-build cmake -DLLVM_USE_LINKER=&amp;#34;lld&amp;#34; -DLLVM_TARGETS_TO_BUILD=&amp;#34;&amp;#34; -DLLVM_EXPERIMENTAL_TARGETS_TO_BUILD=&amp;#34;Z80&amp;#34; -DLLVM_ENABLE_PROJECTS=&amp;#34;clang&amp;#34; ../ make clang llvm-mc llc lld -j$(nproc)  Step 2 will compile a clang for Z80 in the &amp;quot;build&amp;quot;/bin directory. P.S. Feel free to use an IDE like CLion, it might be very helpful when reading LLVM source code.</description>
    </item>
    
    <item>
      <title>LLVM For Dummies: (1)Intro &amp; Assembler</title>
      <link>/posts/llvm_assembler/</link>
      <pubDate>Tue, 06 Oct 2020 00:00:00 -0400</pubDate>
      
      <guid>/posts/llvm_assembler/</guid>
      <description>What is LLVM and why?  The LLVM compiler infrastructure project is a set of compiler and toolchain technologies,[4] which can be used to develop a front end for any programming language and a back end for any instruction set architecture. LLVM is designed around a language-independent intermediate representation that serves as a portable, high-level assembly language that can be optimized with a variety of transformations over multiple passes. (Wikipedia)</description>
    </item>
    
    <item>
      <title>Tarbell MD1101 SSSD Floppy Controller</title>
      <link>/posts/tarbell_md1101/</link>
      <pubDate>Wed, 27 Nov 2019 00:00:00 -0400</pubDate>
      
      <guid>/posts/tarbell_md1101/</guid>
      <description>MD1101 Our machine came with a Tarbell MD1101 Single Side Single Density (SSSD) floppy drive controller along with 2 8&amp;quot; floppy drives.
 The Tarbell Floppy Disk Interface was a programmed-data-transfer (not DMA) device utilizing Port I/O, similar for example to the SD Systems Versafloppy boards. It was designed to work with a variety of standard-size floppy disk drives. It includes a 32-byte ROM bootstrap program, which was automatically enabled when the computer RESET button was pushed, and which switched itself out after the bootstrap had run.</description>
    </item>
    
    <item>
      <title>CP/M 2.2 from scratch</title>
      <link>/posts/cpm-boot-up/</link>
      <pubDate>Sat, 05 Oct 2019 12:23:09 -0400</pubDate>
      
      <guid>/posts/cpm-boot-up/</guid>
      <description>CP/M 2.2 CP/M was the state-of-art operating system for home computers of the era. As CP/M is designed for this machine, we thought it might be helpful to be able to run the CP/M OS before we start writing our own.
Getting the CP/M Boot disk With some quick research, it&amp;rsquo;s not hard to find that instead of having a &amp;ldquo;generic&amp;rdquo; CP/M boot disk, you are suppose to have a customized version of the boot disk specifically designed for your machine configuration.</description>
    </item>
    
    <item>
      <title>GWEMU - Intel 8080 Emulator</title>
      <link>/posts/gwemu_emulator/</link>
      <pubDate>Tue, 27 Aug 2019 12:23:09 -0400</pubDate>
      
      <guid>/posts/gwemu_emulator/</guid>
      <description>Why write another emulator If you look around for intel 8080 (which is what the system is based on) emulator on the internet today, all you will find is emulators that are tailored towards running games (namely space invadors); however, we wanted to use an emulator to 1) test our compiler 2) help debugging our assembly software when debugging using the real machine could be tricky.
Introducing the GWEMU GitHub Project URL</description>
    </item>
    
    <item>
      <title>New SIO Compatable Serial Card</title>
      <link>/posts/new_sio_compatable_serial_card/</link>
      <pubDate>Wed, 03 Apr 2019 22:27:06 -0400</pubDate>
      
      <guid>/posts/new_sio_compatable_serial_card/</guid>
      <description>Although the system we have does include an original IMSAI SIO-2 card, which includes 2 RS-232 compatable serial interface. However, we are unable to get the card working reliably. (#TODO Link Post Here) While repairing the original IMSAI SIO-2 card is still in the long term plan, we decided to implement a custom and modern serial solution that emulates the IMSAI SIO-2 board with Intel 8051 USART communication interface IC.</description>
    </item>
    
    <item>
      <title>GWASM - The 8080 Assembler</title>
      <link>/posts/assembler/</link>
      <pubDate>Tue, 02 Apr 2019 12:23:09 -0400</pubDate>
      
      <guid>/posts/assembler/</guid>
      <description>On the software side, to build an operating system, we will definitly need a compiler and an assembler. As the assembler is the simpler task of the two, we decided to start with this.
The finished assembler can be found on our Github repository
Lexer / Tokenizer The first part of any compiler (assembler) is to lex the source language. This is done using flex.
Flex rules```%{ #include &amp;ldquo;helpers.</description>
    </item>
    
  </channel>
</rss>
